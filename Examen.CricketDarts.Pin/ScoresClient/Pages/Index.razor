@page "/"
@using ScoresClient.Domain
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<table class="table">
    <thead>
    <tr>
        <th scope="col">Player</th>
        <th scope="col">Throw 1</th>
        <th scope="col">Throw 2</th>
        <th scope="col">Throw3</th>
        <th scope="col">Score</th>
    </tr>
    </thead>
    <tbody>
    @foreach (Score score in scores)
    {
        <tr>
            @if (score.Player == "Player 1")
            {
                <th scope="row">@player1.Name</th>
            }
            else
            {
                <th scope="row">@player2.Name</th>
            }
          
            <td>@score.Throw1</td>
            <td>@score.Throw2</td>
            <td>@score.Throw3</td>
            <td>@score.ScoreAmount</td>
        </tr>
    }
    </tbody>
</table>
<div class="container text-center">
    <div class="row">
        @if (player1 != null && player2 != null)
        {
            <div class="col">
                <h3>@player1.Name Score: <span>@player1TotalScore</span></h3>
            </div>
            <div class="col">
                <h3>@player2.Name Score: <span>@player2TotalScore</span></h3>
            </div>
        }
    </div>
</div>

@code {
    private HubConnection? hubConnection;

    private Player player1;
    private Player player2;
    public int? player1TotalScore { get; set; }
    public int? player2TotalScore { get; set; }
    private bool allPlayersAssigned;
    public List<Score> scores { get; set; } = new List<Score>();
    
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("https://localhost:7116/scorehub"))
            .WithAutomaticReconnect()
            .Build();
        hubConnection.On<Player>("ReceivePlayer", (player) =>
        {
            while (allPlayersAssigned == false)
            {
                if (player1 == null)
                {
                    player1 = new Player()
                    {
                        Name = player.Name,
                        Nationality = player.Nationality,
                    };
                }
                else
                {
                    player2 = new Player()
                    {
                        Name = player.Name,
                        Nationality = player.Nationality,
                    };
                    
                    allPlayersAssigned = true;
                }
            }
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Score>("ReceiveScore", (score) =>
        {
            scores.Add(score);

            if (score.Player == "Player 1")
            {
                player1TotalScore += (int)score.ScoreAmount;
            }
            else
            {
                player2TotalScore += (int)score.ScoreAmount;
            }

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }
}